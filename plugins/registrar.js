const { createHash } = require('crypto')
let Reg = /(.*)([.|])([0-9]*)$/i
let handler = async function (m, { text, usedPrefix }) {
  let user = global.DATABASE._data.users[m.sender]
  if (user.registered === true) throw `Usted ya est√° registrado \nQuiere volver a registrarse? ${usedPrefix}unreg <SN|N√öMERO DE SERIE>`
  if (!Reg.test(text)) throw `‚ú®Porfavor Escribir bien sin espacips tal cual se indica‚ú®\n*${usedPrefix}registrar nombre.edad*`
  let [_, name, splitter, age] = text.match(Reg)
  if (!name) throw 'Los nombres no pueden estar vac√≠os (Alphanumeric)'
  if (!age) throw 'La edad no puede estar vac√≠a (Angka)'
  user.name = name
  user.age = parseInt(age)
  user.regTime = + new Date
  user.registered = true
{

      conn.sendFile(m.chat, 'registratado.mp3', '', 'xd', m)

}
  let sn = createHash('md5').update(m.sender).digest('hex')
  m.reply(`
El registro fue exitoso‚úÖüëå

‚ï≠‚îÄ„Äå ‚ö°Informaci√≥n‚ö° „Äç
‚îÇüî≤‚óªÔ∏è‚óΩ‚ñ´Ô∏è‚ú®Nombre‚ú®: ${name}
‚îÇüî≤‚óªÔ∏è‚óΩ‚ñ´Ô∏èüî•Edadüî•: ${age}a√±os
‚îÇüî≤‚óªÔ∏è‚óΩ‚ñ´Ô∏èüí¢SNüí¢: ${sn}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ„Äåüî•üî•üî•üî•üî•üî•üî•„Äç
`.trim())
}
handler.help = ['registrar', 'reg', 'register'].map(v => v + ' <nombre>.<edad>')
handler.tags = ['exp']

handler.command = /^(registrar|reg(ister)?)$/i

module.exports = handler

